
import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from fastapi import FastAPI
import asyncio
from generate_pdf import generate_pdf

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

fastapi_app = FastAPI()
app = ApplicationBuilder().token(BOT_TOKEN).build()

user_state = {}

templates = {
    "üìù –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ": [
        "–§–ò–û", "–í–æ–∑—Ä–∞—Å—Ç", "–î–∏–∞–≥–Ω–æ–∑", "–û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    ],
    "ü©∫ –£–ó–ò –æ—Ä–≥–∞–Ω–æ–≤ –º–∞–ª–æ–≥–æ —Ç–∞–∑–∞": [
        "–§–ò–û", "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏", "–ü–æ–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ç–∫–∏", "–†–∞–∑–º–µ—Ä—ã –º–∞—Ç–∫–∏",
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∏–æ–º–µ—Ç—Ä–∏—è", "–ú-—ç—Ö–æ", "–°–æ—Å—Ç–æ—è–Ω–∏–µ —à–µ–π–∫–∏ –º–∞—Ç–∫–∏", "–Ø–∏—á–Ω–∏–∫–∏",
        "–ù–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π", "–°–≤–æ–±–æ–¥–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å", "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    ]
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[k] for k in templates] + [["üõë –°—Ç–æ–ø"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_state:
        del user_state[user_id]
        await update.message.reply_text("‚õîÔ∏è –í–≤–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start", reply_markup=ReplyKeyboardRemove())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if text == "üõë –°—Ç–æ–ø":
        await stop(update, context)
        return

    if user_id not in user_state:
        if text in templates:
            user_state[user_id] = {"template": text, "fields": templates[text], "data": {}}
            first_field = user_state[user_id]["fields"][0]
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: {first_field}")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start")
        return

    state = user_state[user_id]
    current_field_index = len(state["data"])

    if current_field_index < len(state["fields"]):
        field_name = state["fields"][current_field_index]
        if text.lower() != "–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ":
            state["data"][field_name] = text
        current_field_index += 1

    if current_field_index < len(state["fields"]):
        next_field = state["fields"][current_field_index]
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: {next_field}
(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ')")
    else:
        filepath = generate_pdf(state["template"], state["data"])
        with open(filepath, "rb") as f:
            await update.message.reply_document(document=InputFile(f, filename=os.path.basename(filepath)))
        await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start", reply_markup=ReplyKeyboardRemove())
        del user_state[user_id]

app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

@fastapi_app.on_event("startup")
async def on_startup():
    await app.bot.set_webhook(WEBHOOK_URL)
    asyncio.create_task(app.initialize())
    asyncio.create_task(app.start())

@fastapi_app.on_event("shutdown")
async def on_shutdown():
    await app.shutdown()
