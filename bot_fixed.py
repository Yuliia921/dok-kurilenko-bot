
import os
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from fastapi import FastAPI
from generate_pdf import generate_pdf

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

user_state = {}

templates = {
    "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ": ["–§–ò–û", "–í–æ–∑—Ä–∞—Å—Ç", "–î–∏–∞–≥–Ω–æ–∑", "–û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
    "–£–ó–ò –º–∞–ª–æ–≥–æ —Ç–∞–∑–∞": [
        "–§–ò–û", "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏", "–ú–∞—Ç–∫–∞ (–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —Ñ–æ—Ä–º–∞, —Ä–∞–∑–º–µ—Ä—ã, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∏–æ–º–µ—Ç—Ä–∏—è)",
        "–ú-—ç—Ö–æ", "–®–µ–π–∫–∞ –º–∞—Ç–∫–∏", "–ü—Ä–∞–≤—ã–π —è–∏—á–Ω–∏–∫", "–õ–µ–≤—ã–π —è–∏—á–Ω–∏–∫", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
        "–°–≤–æ–±–æ–¥–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å", "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    ],
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[k] for k in templates] + [["üõë –°—Ç–æ–ø"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_state:
        del user_state[user_id]
        await update.message.reply_text("‚õîÔ∏è –í–≤–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start", reply_markup=ReplyKeyboardRemove())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if text == "üõë –°—Ç–æ–ø":
        await stop(update, context)
        return

    if user_id not in user_state:
        if text in templates:
            user_state[user_id] = {
                "template": text,
                "data": {},
                "fields": templates[text].copy()
            }
            current_field = user_state[user_id]["fields"].pop(0)
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ {current_field}:")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–∑ –º–µ–Ω—é.")
        return

    state = user_state[user_id]
    field = templates[state["template"]][len(state["data"])]
    state["data"][field] = text

    if state["fields"]:
        next_field = state["fields"].pop(0)
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ {next_field}:")
    else:
        filepath = generate_pdf(state["template"], state["data"])
        await update.message.reply_document(document=open(filepath, "rb"))
        del user_state[user_id]

app = Application.builder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

fastapi_app = FastAPI()

@fastapi_app.get("/")
async def root():
    return {"status": "ok"}

@fastapi_app.on_event("startup")
async def on_startup():
    await app.bot.set_webhook(WEBHOOK_URL)

@fastapi_app.on_event("shutdown")
async def on_shutdown():
    await app.shutdown()

@fastapi_app.post("/webhook")
async def telegram_webhook(update: dict):
    await app.process_update(Update.de_json(update, app.bot))
    return {"ok": True}
