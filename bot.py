
import logging
import io
from telegram import Update, ReplyKeyboardMarkup, BotCommand, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

FIO, AGE, DIAGNOSIS, EXAM, RECOMMENDATION = range(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[
        "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ"
    ]]
    await update.message.reply_text(
        "üå∏ –î–æ–∫ –ö—É—Ä–∏–ª–µ–Ω–∫–æ. –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def start_consult(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["–î–∞—Ç–∞"] = datetime.now().strftime("%d.%m.%Y")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞:")
    return FIO

async def receive_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["–§–ò–û"] = update.message.text
    await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç:")
    return AGE

async def receive_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["–í–æ–∑—Ä–∞—Å—Ç"] = update.message.text
    await update.message.reply_text("–î–∏–∞–≥–Ω–æ–∑:")
    return DIAGNOSIS

async def receive_diagnosis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["–î–∏–∞–≥–Ω–æ–∑"] = update.message.text
    await update.message.reply_text("–û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ:")
    return EXAM

async def receive_exam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["–û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"] = update.message.text
    await update.message.reply_text("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    return RECOMMENDATION

async def receive_recommendation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"] = update.message.text
    await update.message.reply_text("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF...")

    buffer = io.BytesIO()
    p = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4
    y = height - 50

    p.setFont("Helvetica", 14)
    p.drawString(100, y, "üå∏ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ")
    p.setFont("Helvetica", 11)
    y -= 30
    for key, value in context.user_data.items():
        p.drawString(50, y, f"{key}: {value}")
        y -= 20
    y -= 20
    p.drawString(50, y, "–ü–æ–¥–ø–∏—Å—å: –ö—É—Ä–∏–ª–µ–Ω–∫–æ –Æ.–°.")

    p.showPage()
    p.save()
    buffer.seek(0)

    await update.message.reply_document(
        document=InputFile(buffer, filename="konsultaciya.pdf"),
        caption="–í–∞—à–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ üå∏"
    )

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token("7495233579:AAGKqPpZY0vd3ZK9a1ljAbZjEehCCMhFIdU").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel))

    consult_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^(–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ)$"), start_consult)],
        states={
            FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_fio)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_age)],
            DIAGNOSIS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_diagnosis)],
            EXAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_exam)],
            RECOMMENDATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_recommendation)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(consult_conv)

    async def set_commands(_: ContextTypes.DEFAULT_TYPE):
        await app.bot.set_my_commands([
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥")
        ])

    app.post_init = set_commands
    app.run_polling()

if __name__ == "__main__":
    main()
