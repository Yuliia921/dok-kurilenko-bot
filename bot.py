
import logging
import os
import threading
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.info("üîß –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å PDF –∏ –ª–æ–≥–∞–º–∏...")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"
if os.path.exists(font_path):
    pdfmetrics.registerFont(TTFont("DejaVuSans", font_path))
else:
    logger.warning("‚ö†Ô∏è –®—Ä–∏—Ñ—Ç DejaVuSans –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ –≤ PDF –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

# –•–µ–Ω–¥–ª–µ—Ä—ã Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"üì• –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {update.effective_user.first_name}")
    reply_keyboard = [['–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ']]
    await update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–æ–∫ –ö—É—Ä–∏–ª–µ–Ω–∫–æ üå∏
–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text} –æ—Ç {update.effective_user.first_name}")

    if update.message.text == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ":
        filename = f"Consult_{update.effective_user.id}.pdf"
        c = canvas.Canvas(filename)
        if pdfmetrics.getRegisteredFontNames():
            c.setFont("DejaVuSans", 12)
        c.drawString(100, 750, f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è {update.effective_user.first_name}")
        c.drawString(100, 730, "–î–∞—Ç–∞: __________")
        c.drawString(100, 710, "–î–∏–∞–≥–Ω–æ–∑: __________")
        c.drawString(100, 690, "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: __________")
        c.save()

        logger.info(f"‚úÖ PDF —Å–æ–∑–¥–∞–Ω: {filename}")
        await update.message.reply_document(document=InputFile(filename), filename=filename)
        os.remove(filename)
    else:
        await update.message.reply_text("–ü—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–∏–Ω—è—Ç. –°–ø–∞—Å–∏–±–æ üå∏")

# –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
def run_telegram_bot():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    app = ApplicationBuilder().token("7495233579:AAGKqPpZY0vd3ZK9a1ljAbZjEehCCMhFIdU").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    async def main():
        await app.initialize()
        await app.start()
        await app.bot.delete_webhook()
        await app.set_my_commands([("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")])
        logger.info("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        await app.updater.start_polling()
        await app.updater.wait_until_closed()

    loop.run_until_complete(main())

# Flask-–∑–∞–≥–ª—É—à–∫–∞
flask_app = Flask(__name__)

@flask_app.route('/')
def index():
    return '–î–æ–∫ –ö—É—Ä–∏–ª–µ–Ω–∫–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üå∏'

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    threading.Thread(target=run_telegram_bot).start()
    flask_app.run(host='0.0.0.0', port=10000)
