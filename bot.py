import os
import logging
from io import BytesIO
import telegram
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from telegram.error import Conflict
from generate_pdf import generate_pdf

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
user_data = {}

TEMPLATES = {
    "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ": ["–§–ò–û", "–í–æ–∑—Ä–∞—Å—Ç", "–î–∏–∞–≥–Ω–æ–∑", "–û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
    "–£–ó–ò –¥–ª—è –±–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö": [
        "–§–ò–û", "–ü–æ—Å–ª–µ–¥–Ω—è—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è", "–ü–æ–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ç–∫–∏", "–†–∞–∑–º–µ—Ä –ø–ª–æ–¥–Ω–æ–≥–æ —è–π—Ü–∞",
        "–†–∞–∑–º–µ—Ä —ç–º–±—Ä–∏–æ–Ω–∞", "–ñ–µ–ª—Ç–æ—á–Ω—ã–π –º–µ—à–æ–∫", "–°–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ –∏ –ß–°–°", "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ö–æ—Ä–∏–æ–Ω–∞",
        "–ñ–µ–ª—Ç–æ–µ —Ç–µ–ª–æ", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    ]
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[key] for key in TEMPLATES]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–æ–∫ –ö—É—Ä–∏–ª–µ–Ω–∫–æ üå∏\n–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.effective_chat.id

    if text in TEMPLATES:
        user_data[chat_id] = {
            "—à–∞–±–ª–æ–Ω": text,
            "–ø–æ–ª—è": {},
            "—à–∞–≥": 0,
            "—Å–ø–∏—Å–æ–∫_–ø–æ–ª–µ–π": TEMPLATES[text]
        }
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ {TEMPLATES[text][0]}:")
    elif chat_id in user_data:
        data = user_data[chat_id]
        —à–∞–≥ = data["—à–∞–≥"]
        –ø–æ–ª—è = data["—Å–ø–∏—Å–æ–∫_–ø–æ–ª–µ–π"]

        if —à–∞–≥ < len(–ø–æ–ª—è):
            data["–ø–æ–ª—è"][–ø–æ–ª—è[—à–∞–≥]] = text
            data["—à–∞–≥"] += 1
            if data["—à–∞–≥"] < len(–ø–æ–ª—è):
                await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ {–ø–æ–ª—è[data['—à–∞–≥']]}:")
            else:
                filepath = generate_pdf(data["–ø–æ–ª—è"])
                file_size = os.path.getsize(filepath)
                logger.info(f"üìÑ PDF —Å–æ–∑–¥–∞–Ω: {filepath}, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
                await update.message.reply_document(
                    document=BytesIO(open(filepath, 'rb').read()), filename=os.path.basename(filepath),
                    caption=f"{data['—à–∞–±–ª–æ–Ω']} üå∏"
                )
                del user_data[chat_id]
        else:
            await update.message.reply_text("–®–∞–±–ª–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")

if __name__ == "__main__":
    try:
        telegram.Bot(token=BOT_TOKEN).delete_webhook(drop_pending_updates=True)
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.run_polling()
    except Conflict as e:
        logger.error("‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç: –±–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–¥–µ-—Ç–æ –µ—â—ë. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")