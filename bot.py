
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, BotCommand
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

NAME, COMPLAINTS, ANAMNESIS, EXAM = range(4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("–û—Å–º–æ—Ç—Ä")], [KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")]]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–æ–∫ –ö—É—Ä–∏–ª–µ–Ω–∫–æ üå∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    logger.info(f"üë§ /start –æ—Ç {update.effective_user.first_name}")

async def start_exam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞:")
    return NAME

async def receive_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["–§–ò–û"] = update.message.text
    await update.message.reply_text("üîπ –í–≤–µ–¥–∏—Ç–µ –∂–∞–ª–æ–±—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞:")
    return COMPLAINTS

async def receive_complaints(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["–ñ–∞–ª–æ–±—ã"] = update.message.text
    await update.message.reply_text("ü©∫ –í–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–º–Ω–µ–∑ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:")
    return ANAMNESIS

async def receive_anamnesis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["–ê–Ω–∞–º–Ω–µ–∑"] = update.message.text
    await update.message.reply_text("üîç –û–ø–∏—à–∏—Ç–µ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å:")
    return EXAM

async def receive_exam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["–û–±—ä–µ–∫—Ç–∏–≤–Ω–æ"] = update.message.text
    summary = "\n".join([f"{k}: {v}" for k, v in context.user_data.items()])
    await update.message.reply_text(f"üå∏ –ü—Ä–æ—Ç–æ–∫–æ–ª '–û—Å–º–æ—Ç—Ä':\n{summary}")
    logger.info(f"‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {summary}")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

async def show_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data:
        summary = "\n".join([f"{k}: {v}" for k, v in context.user_data.items()])
        await update.message.reply_text(f"üìÑ –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª:\n{summary}")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ—Ç–æ–∫–æ–ª –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —à–∞–±–ª–æ–Ω '–û—Å–º–æ—Ç—Ä'.")

def main():
    app = ApplicationBuilder().token("7495233579:AAGKqPpZY0vd3ZK9a1ljAbZjEehCCMhFIdU").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CommandHandler("summary", show_summary))
    app.add_handler(MessageHandler(filters.Regex("^(–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞)$"), show_summary))

    exam_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^(–û—Å–º–æ—Ç—Ä)$"), start_exam)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_name)],
            COMPLAINTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_complaints)],
            ANAMNESIS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_anamnesis)],
            EXAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_exam)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(exam_conv)

    async def set_commands(_: ContextTypes.DEFAULT_TYPE):
        await app.bot.set_my_commands([
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥"),
            BotCommand("summary", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª"),
        ])

    app.post_init = set_commands
    app.run_polling()

if __name__ == "__main__":
    main()
