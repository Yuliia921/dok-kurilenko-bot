
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from flask import Flask
import threading
import asyncio
import os
from reportlab.pdfgen import canvas

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.info("üîß –°—Ç–∞—Ä—Ç bot.py")

flask_app = Flask(__name__)

@flask_app.route('/')
def index():
    return '–î–æ–∫ –ö—É—Ä–∏–ª–µ–Ω–∫–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üå∏'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [['–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ']]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–æ–∫ –ö—É—Ä–∏–ª–µ–Ω–∫–æ üå∏\n–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–§–ò–û; –í–æ–∑—Ä–∞—Å—Ç; –î–∏–∞–≥–Ω–æ–∑; –û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ; –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    elif ";" in text:
        try:
            fio, age, diagnosis, exam, rec = [x.strip() for x in text.split(";")]
            file_path = f"/tmp/{fio.replace(' ', '_')}_zakl.pdf"
            c = canvas.Canvas(file_path)
            c.drawString(100, 800, f"–§–ò–û: {fio}")
            c.drawString(100, 780, f"–í–æ–∑—Ä–∞—Å—Ç: {age}")
            c.drawString(100, 760, f"–î–∏–∞–≥–Ω–æ–∑: {diagnosis}")
            c.drawString(100, 740, f"–û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {exam}")
            c.drawString(100, 720, f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {rec}")
            c.drawString(100, 700, "–í—Ä–∞—á: –ö—É—Ä–∏–ª–µ–Ω–∫–æ –Æ.–°.")
            c.save()
            await update.message.reply_document(document=open(file_path, "rb"), filename="zakluchenie.pdf")
        except Exception as e:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
    else:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–ª–∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")

def run_bot():
    async def main():
        app = ApplicationBuilder().token(os.environ.get("BOT_TOKEN")).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        await app.updater.idle()

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(main())

if __name__ == "__main__":
    threading.Thread(target=run_bot).start()
    flask_app.run(host='0.0.0.0', port=10000)
