import os
import logging
from fastapi import FastAPI, Request
from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)
from generate_pdf import generate_pdf

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not BOT_TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞! –£–∫–∞–∂–∏—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render.")

if not WEBHOOK_URL:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω–∞! –£–∫–∞–∂–∏—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render.")

app = FastAPI()
user_data = {}

application = Application.builder().token(BOT_TOKEN).build()

@app.on_event("startup")
async def startup():
    await application.bot.set_webhook(f"{WEBHOOK_URL}/webhook")
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    await application.initialize()
    await application.start()

@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"ok": True}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–æ–∫ –ö—É—Ä–∏–ª–µ–Ω–∫–æ üå∏\n–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.effective_chat.id

    if text == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ":
        user_data[chat_id] = {"—à–∞–±–ª–æ–Ω": "–∑–∞–∫–ª—é—á–µ–Ω–∏–µ", "–ø–æ–ª—è": {}, "—à–∞–≥": 0}
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞:")
    elif chat_id in user_data:
        data = user_data[chat_id]
        —à–∞–≥ = data["—à–∞–≥"]
        –ø–æ–ª—è = ["–§–ò–û", "–í–æ–∑—Ä–∞—Å—Ç", "–î–∏–∞–≥–Ω–æ–∑", "–û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"]

        if —à–∞–≥ < len(–ø–æ–ª—è):
            data["–ø–æ–ª—è"][–ø–æ–ª—è[—à–∞–≥]] = text
            data["—à–∞–≥"] += 1
            if data["—à–∞–≥"] < len(–ø–æ–ª—è):
                await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ {–ø–æ–ª—è[data['—à–∞–≥']]}:")
            else:
                filepath = generate_pdf(data["–ø–æ–ª—è"])
                await update.message.reply_document(InputFile(filepath), caption="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ üå∏")
                del user_data[chat_id]
        else:
            await update.message.reply_text("–®–∞–±–ª–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")