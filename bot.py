
import logging
from flask import Flask
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import threading
import asyncio
import httpx
from telegram.request import HTTPXRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.info("üõ†Ô∏è –ë–æ—Ç —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

# –•—ç–Ω–¥–ª–µ—Ä /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("‚úÖ /start –ø–æ–ª—É—á–µ–Ω")
    await update.message.reply_text("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π! üå∏")

# Telegram –±–æ—Ç
def run_telegram_bot():
    async def main():
        # HTTP-–∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        httpx_client = httpx.AsyncClient(timeout=30)
        request = HTTPXRequest(http_version="1.1", client=httpx_client)

        app = ApplicationBuilder().token("7591394007:AAHfjNZqLjdDDP0LpUfL7GvecfiZEgCAY_8").request(request).build()
        app.add_handler(CommandHandler("start", start))
        await app.bot.delete_webhook(drop_pending_updates=True)
        await app.initialize()
        await app.start()
        await asyncio.Future()

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(main())
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

# Flask-–∑–∞–≥–ª—É—à–∫–∞
app = Flask(__name__)

@app.route("/")
def index():
    return "–î–æ–∫ –ö—É—Ä–∏–ª–µ–Ω–∫–æ –±–æ—Ç üå∏ (—Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ initialize)"

if __name__ == "__main__":
    threading.Thread(target=run_telegram_bot).start()
    app.run(host="0.0.0.0", port=10000)
