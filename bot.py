
import asyncio
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from flask import Flask
from werkzeug.serving import run_simple

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.info("üîß –°—Ç–∞—Ä—Ç —Å–∫—Ä–∏–ø—Ç–∞ bot.py")

# Telegram —Ö—ç–Ω–¥–ª–µ—Ä—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [['–û—Å–º–æ—Ç—Ä', '–£–ó–ò', '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è']]
    await update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–æ–∫ –ö—É—Ä–∏–ª–µ–Ω–∫–æ üå∏\n–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–∏–Ω—è—Ç. –°–ø–∞—Å–∏–±–æ üå∏")

# Telegram-–±–æ—Ç –∑–∞–ø—É—Å–∫
async def telegram_task():
    logger.info("üöÄ Telegram-–±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app = ApplicationBuilder().token("7591394007:AAHBZWhMJgpmnKY85suJaJ5AW_RpwPTZ9VI").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    await app.initialize()
    await app.start()
    await app.bot.set_my_commands([("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")])
    logger.info("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.updater.start_polling()
    await app.updater.idle()

# Flask-–∑–∞–≥–ª—É—à–∫–∞
def flask_task():
    logger.info("üåê Flask –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app = Flask(__name__)

    @app.route('/')
    def index():
        return '–î–æ–∫ –ö—É—Ä–∏–ª–µ–Ω–∫–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üå∏'

    run_simple("0.0.0.0", 10000, app, use_reloader=False)

# –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
async def main():
    loop = asyncio.get_running_loop()
    flask_future = loop.run_in_executor(None, flask_task)
    telegram_future = telegram_task()
    await asyncio.gather(flask_future, telegram_future)

if __name__ == '__main__':
    asyncio.run(main())
