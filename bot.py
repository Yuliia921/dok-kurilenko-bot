from telegram import Update, InputFile, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from fastapi import FastAPI
import os
from generate_pdf import generate_pdf

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

app = ApplicationBuilder().token(BOT_TOKEN).build()
fastapi_app = FastAPI()

user_state = {}

templates = {
    "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ": [
        "–§–ò–û", "–í–æ–∑—Ä–∞—Å—Ç", "–î–∏–∞–≥–Ω–æ–∑", "–û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    ],
    "–£–ó–ò –º–∞–ª–æ–≥–æ —Ç–∞–∑–∞": [
        "–§–ò–û", "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏", "–ü–æ–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ç–∫–∏", "–†–∞–∑–º–µ—Ä—ã –º–∞—Ç–∫–∏",
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∏–æ–º–µ—Ç—Ä–∏—è", "–ú-—ç—Ö–æ", "–°–æ—Å—Ç–æ—è–Ω–∏–µ —à–µ–π–∫–∏", "–†–∞–∑–º–µ—Ä—ã —è–∏—á–Ω–∏–∫–æ–≤",
        "–î–æ–ø. –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", "–°–≤–æ–±–æ–¥–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å", "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    ]
}

@fastapi_app.on_event("startup")
async def startup():
    await app.bot.set_webhook(WEBHOOK_URL)

@fastapi_app.on_event("shutdown")
async def shutdown():
    await app.shutdown()

@app.command_handler("start")
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[k] for k in templates] + [["üõë –°—Ç–æ–ø"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    )

@app.message_handler(filters.TEXT)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if text == "üõë –°—Ç–æ–ø":
        user_state.pop(user_id, None)
        await update.message.reply_text("‚õîÔ∏è –í–≤–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω.", reply_markup=ReplyKeyboardRemove())
        return

    if user_id not in user_state:
        if text in templates:
            user_state[user_id] = {"template": text, "fields": templates[text], "data": []}
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è: {templates[text][0]}")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")
    else:
        state = user_state[user_id]
        state["data"].append(text)
        if len(state["data"]) < len(state["fields"]):
            next_field = state["fields"][len(state["data"])]
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è: {next_field}")
        else:
            filepath = generate_pdf(state["template"], dict(zip(state["fields"], state["data"])))
            await update.message.reply_document(document=InputFile(filepath))
            user_state.pop(user_id)

def main():
    import uvicorn
    uvicorn.run(fastapi_app, host="0.0.0.0", port=10000)

if __name__ == "__main__":
    main()