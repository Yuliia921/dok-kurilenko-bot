import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from flask import Flask
import threading
import asyncio

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.info("üîß –°—Ç–∞—Ä—Ç bot.py")

# –•–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [['–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ']]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–æ–∫ –ö—É—Ä–∏–ª–µ–Ω–∫–æ üå∏\n–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

# –•–µ–Ω–¥–ª–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞:")
        context.user_data["state"] = "fio"
    elif context.user_data.get("state") == "fio":
        context.user_data["fio"] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞:")
        context.user_data["state"] = "age"
    elif context.user_data.get("state") == "age":
        context.user_data["age"] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑:")
        context.user_data["state"] = "diagnosis"
    elif context.user_data.get("state") == "diagnosis":
        context.user_data["diagnosis"] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ:")
        context.user_data["state"] = "exam"
    elif context.user_data.get("state") == "exam":
        context.user_data["exam"] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        context.user_data["state"] = "recommend"
    elif context.user_data.get("state") == "recommend":
        context.user_data["recommend"] = update.message.text
        fio = context.user_data.get("fio", "")
        age = context.user_data.get("age", "")
        diagnosis = context.user_data.get("diagnosis", "")
        exam = context.user_data.get("exam", "")
        recommend = context.user_data.get("recommend", "")
        text = f"üå∏ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ üå∏\n\n–§–ò–û: {fio}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–î–∏–∞–≥–Ω–æ–∑: {diagnosis}\n–û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {exam}\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommend}"
        await update.message.reply_text(text)
        context.user_data.clear()
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞.")

# Telegram-–±–æ—Ç
def run_bot():
    async def main():
        app = ApplicationBuilder().token("7495233579:AAGKqPpZY0vd3ZK9a1ljAbZjEehCCMhFIdU").build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await app.run_polling()

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(main())

# Flask-–∑–∞–≥–ª—É—à–∫–∞
flask_app = Flask(__name__)

@flask_app.route("/")
def index():
    return "–î–æ–∫ –ö—É—Ä–∏–ª–µ–Ω–∫–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üå∏"

if __name__ == "__main__":
    threading.Thread(target=run_bot).start()
    flask_app.run(host="0.0.0.0", port=10000)